{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","App.jsx","api/Api.jsx","index.js"],"names":["TodoList","todos","onClick","className","length","map","todo","completed","key","id","type","checked","readOnly","title","name","userId","CurrentUser","user","email","phone","App","state","selectedUserId","inputValue","selectValue","event","setState","target","onChange","value","onChangeSelect","fetch","then","response","json","data","filter","prevProps","prevState","url","this","console","log","undefined","filteredTodos","includes","placeholder","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38f3989a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\n\nexport const TodoList = ({ todos, onClick }) => {\n  return (\n    <div className=\"TodoList\">\n      <h2>{`Todos: ${todos.length}`}</h2>\n\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\">\n          {todos.map(todo => (\n            <>\n              {todo.completed\n                ? (\n                  <li\n                    key={todo.id}\n                    className=\"TodoList__item TodoList__item--checked\"\n                  >\n                    <label>\n                      <input type=\"checkbox\" checked readOnly />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className=\"TodoList__user-button--selected button\"\n                      type=\"button\"\n                      name={todo.userId}\n                      onClick={onClick}\n                    >\n                      {`User ${todo.userId}`}\n                    </button>\n                  </li>\n                )\n                : (\n                  <li\n                    key={todo.id}\n                    className=\"TodoList__item TodoList__item--unchecked\"\n                  >\n                    <label>\n                      <input type=\"checkbox\" readOnly />\n                      <p>{todo.title}</p>\n                    </label>\n\n                    <button\n                      className=\"TodoList__user-button--selected button\"\n                      type=\"button\"\n                      name={todo.userId}\n                      onClick={onClick}\n                    >\n                      {`User ${todo.userId}`}\n                    </button>\n                  </li>\n                )}\n            </>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\n\nexport const CurrentUser = ({ user }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        {`Selected user: ${user.id}`}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n  </div>\n);\n\nCurrentUser.propTypes = {\n  user: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","/* eslint-disable react/sort-comp */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { allTodos, allUsers } from './api/index';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    user: {},\n    inputValue: '',\n    selectValue: '',\n    completed: null,\n  };\n\n  componentDidMount() {\n    allTodos()\n      .then(todos => this.setState({\n        todos,\n      }));\n  }\n\n  selectedUserId = (event) => {\n    this.setState({ selectedUserId: event.target.name });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { selectedUserId } = this.state;\n    console.log(prevState.selectedUserId, selectedUserId);\n\n    if (prevState.selectedUserId === selectedUserId) {\n      return;\n    }\n\n    if (prevState.selectedUserId !== selectedUserId) {\n      allUsers(selectedUserId)\n        .then((user) => {\n          if (user.data !== null && user.data !== undefined) {\n            this.setState({ user: user.data });\n          } else {\n            this.setState({ selectedUserId: null });\n          }\n        });\n    }\n  }\n\n  onChange = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      inputValue: value,\n    });\n  }\n\n  onChangeSelect = (event) => {\n    const { value } = event.target;\n\n    switch (value) {\n      case 'all':\n        this.setState({\n          selectValue: value,\n          completed: null,\n        });\n        break;\n\n      case 'completed':\n        this.setState({\n          selectValue: value,\n          completed: false,\n        });\n        break;\n\n      case 'not completed':\n        this.setState({\n          selectValue: value,\n          completed: true,\n        });\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const {\n      todos,\n      selectedUserId,\n      user,\n      inputValue,\n      selectValue,\n      completed,\n    } = this.state;\n\n    const filteredTodos = todos.filter(\n      todo => todo.title.includes(inputValue),\n    ).filter(todo => todo.completed !== completed);\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <input\n            value={inputValue}\n            onChange={this.onChange}\n            placeholder=\"Search by Title\"\n          />\n          <select onChange={this.onChangeSelect} value={selectValue}>\n            <option value=\"all\">\n              Show all\n            </option>\n            <option value=\"completed\">\n              Show only completed\n            </option>\n            <option value=\"not completed\">\n              Show only not completed\n            </option>\n          </select>\n          <TodoList todos={filteredTodos} onClick={this.selectedUserId} />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedUserId === null\n            ? (\n              <div className=\"App__content-container\">\n                Wrong User!!!\n              </div>\n            )\n            : (\n              <div className=\"App__content-container\">\n                {selectedUserId ? (\n                  <CurrentUser userId={selectedUserId} user={user} />\n                ) : 'No user selected'}\n              </div>\n            )\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\nconst TODOS_URL = `https://mate-api.herokuapp.com/todos`;\nconst USERS_URL = `https://mate-api.herokuapp.com/users/`;\n\nexport function allTodos() {\n  return fetch(TODOS_URL)\n    .then(response => response.json())\n    .then(todos => todos.data.filter(todo => todo.userId && todo.title));\n}\n\nexport function allUsers(url) {\n  return fetch(USERS_URL + url)\n    .then(response => response.json());\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}